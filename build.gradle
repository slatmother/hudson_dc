apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'base'

repositories {
  mavenCentral()
}

configurations {
  groovyJars.extendsFrom(runtime)
  dfcJars.extendsFrom(runtime)
}

//Всегда должны быть вверху. Иначе ошибка "unresolved state"
dependencies {
  groovyJars group: 'org.codehaus.groovy', name: 'groovy', version: '2.1.3'
  runtime group: 'com.google.guava', name: 'guava', version: '14.0.1'
  dfcJars fileTree(dir: 'lib/dfc', include: '*.jar')
  runtime files('lib/freemarker.jar', 'lib/ojdbc6-11.2.0.1.0.jar')
  testRuntime group: 'junit', name: 'junit', version: '4.+'

  testRuntime fileTree(dir: 'test/resources', include: '*.properties')
}

//repositories {
//  flatDir name: 'localRepository', dirs: 'lib'
//}
//
//configurations {
//  driver
//}


sourceSets {
  main {
//    java {
//      srcDir 'src/java'
//      srcDir ''
//    }

//    groovy.srcDirs = ['src/java/execution/groovy']
    groovy {
      srcDir 'src/java'
    }
//    groovy.srcDirs = ['src/java']

    resources {
      srcDir 'src/resources'
    }

    compileClasspath = project.configurations.compile + configurations.dfcJars + configurations.groovyJars
  }

  test {
//    java { srcDir '' }
    groovy { srcDir 'test/src' }

    resources {
      srcDir 'test/resources'
    }

    runtimeClasspath = main.output + test.output + configurations.testRuntime +
            main.resources + configurations.dfcJars + configurations.groovyJars

    compileClasspath = main.output + configurations.compile + configurations.testCompile + configurations.testRuntime +
            configurations.dfcJars + configurations.groovyJars

//      runtimeClasspath = sourceSets.main.output + project.configurations.compile + project.configurations.testCompile +
//            project.configurations.testRuntime + project.configurations.runtime
  }
}

task show << {
  sourceSets.test.runtimeClasspath.each { println it }
//  sourceSets.main.runtimeClasspath.each {println it}

//  project.configurations.classpath.each { println it }
//  sourceSets.main.output.each { println it }
//  project.configurations.compile.each { println it }
//  project.configurations.testCompile.each { println it }
//  project.configurations.testRuntime.each { println it }
}

task copyDeps(type: Copy) {
  from {
    configurations.runtime
  }
  into 'build/libs/lib'

  from {
    configurations.groovyJars
  }
  into 'build/libs/lib/groovy'

  from {
    configurations.dfcJars
  }
  into 'build/libs/lib/dfc'
}

jar.dependsOn copyDeps

jar {
  archiveName = "hudson-dc-1.0.jar"

  def manifestClasspath = configurations.runtime.collect { "${it.name}" }.join(' ') + ' '
  manifestClasspath += configurations.groovyJars.collect { "groovy/${it.name}" }.join(' ') + ' '
  manifestClasspath += configurations.dfcJars.collect { "dfc/${it.name}" }.join(' ') + ' '

  manifest {
    attributes 'Implementation-Title': 'hudson-dc-1.0', "Class-Path": manifestClasspath
  }
}

//jar {
//  from configurations.releaseJars.collect { it.isDirectory() ? it : zipTree(it) }
//  from project.configurations.compile.collect {
//    it.isDirectory() ? it : zipTree(it)
//  }
//}

//from("$projectDir") {
//    include 'lib/**'
//  }

task testMain(dependsOn: 'classes', type: JavaExec) {
  main = 'main.test.MainTest'
  classpath = sourceSets.main.runtimeClasspath
//  args 'mrhaki'
//  systemProperty 'simple.message', 'Hello '
}

task testDQL(dependsOn: 'classes', type: JavaExec) {
  main = 'main.test.DQLExecutorMainTest'
  classpath = sourceSets.main.runtimeClasspath
}


